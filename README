mplex
-----
Extended Metaprogramming Library


*Requirements

  - ruby >= 1.8


*Installation

   TODO


*Example

  1. Create template file example.mpl:

    __BEGIN__
    def delim(i, c, between = ",")
        between if c.length != i+1
    end
    __END__
    %self.each do |msg|
    struct [%msg.name%] {
        %# constructor
        %unless msg.member.empty?
        [%msg.name%](
            const [%m.type%]& [%m.name%]_[%delim(i, msg.member)%]  %|m,i| msg.member.each_with_index
            ) :
            [%m.name%]([%m.name%]_)[%delim(i, msg.member)%]  %|m,i| msg.member.each_with_index
        { }
        %end

        %# members
        [%m.type%] [%m.name%];  %|m| msg.member.each

        static const int id = [%msg.id%];  %>if msg.id
    };

    %end
    %# vim: syntax=mplex


  2. Create context script example.rb:

    data = <<DATA
    Get:
      - [std::string, key]
      - [int, flags]
    Set:
      - [std::string, key]
      - [std::string, value]
    DATA

    require 'yaml'

    msg = Struct.new("Message", :name, :member, :id)
    mem = Struct.new("Member",  :type, :name)

    YAML.load(data).map {|name, member|
        msg.new(name, member.map {|t,v| mem.new(t,v) })
    }


  3. Run mplex with context data

    ./mplex -c example.rb example.mpl -o example.h

    Output will be as following:

    struct Get {
        Get(
            const std::string& key_,
            const int& flags_
            ) :
            key(key_),
            flags(flags_)
        { }

        std::string key;
        int flags;

    };

    struct Set {
        Set(
            const std::string& key_,
            const std::string& value_
            ) :
            key(key_),
            value(value_)
        { }

        std::string key;
        std::string value;

    };


Copyright (C) 2009 FURUHASHI Sadayuki <frsyuki _at_ users.sourceforge.jp>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

