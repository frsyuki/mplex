#!/usr/bin/env ruby
#
# Mplex: Extended Metaprogramming Library
#
# Copyright (C) 2009 FURUHASHI Sadayuki
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

require 'mplex'
require 'optparse'

op = OptionParser.new
op.banner += " input..."

finputs = "-"
foutput = "-"
fctx    = nil
libs    = []
script  = false

op.on("-c file",    "context ruby script") {|v| fctx    = v   }
op.on("-o file",    "output file")         {|v| foutput = v   }
op.on("-r library", "load library")        {|v| libs   << v   }
op.on("-x",         "print ruby script")   {|v| script = true }

(class<<self;self;end).module_eval {
	define_method(:usage) {
		puts op.to_s
		p $!.backtrace
		puts $! unless $!.to_s.empty?
		exit 1
	}
}

begin
	op.parse!(ARGV)

	usage if ARGV.empty?

	finputs = ARGV

	raise "multiple stdin" if (finputs + [fctx]).count("-") >= 2

rescue
	usage
end

def fread(path)
	path == "-" ? $stdin.read : File.read(path)
end

def fname(path)
	path == "-" ? "(stdin)" : path
end

libs.each {|lib| require lib }

inputs = finputs.map {|f| [fread(f), fname(f)] }

if script
	result = ""
	inputs.each {|src, name|
		result.concat Mplex.script(src)
	}

else
	if fctx
		b = nil; Object.instance_eval { b = binding }
		ctx = eval(fread(fctx), b, fname(fctx))
	end
	ctx ||= Object.new

	last_src, last_name = inputs.pop
	inputs.each {|src, name|
		Mplex.result(src, ctx, name)
	}
	result = Mplex.result(last_src, ctx, last_name)
end

if foutput == "-"
	$stdout.write(result)
else
	File.open(foutput, "w") {|f|
		f.write result
	}
end

