#!/usr/bin/env ruby
#
# Mplex: Extended Metaprogramming Library
#
# Copyright (c) 2009 FURUHASHI Sadayuki
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

require 'mplex'
require 'optparse'

op = OptionParser.new
op.banner += " input..."

finputs = "-"
foutput = "-"
fctx    = nil
libs    = []
script  = false

op.on("-c file",    "context ruby script") {|v| fctx    = v   }
op.on("-o file",    "output file")         {|v| foutput = v   }
op.on("-r library", "load library")        {|v| libs   << v   }
op.on("-x",         "print ruby script")   {|v| script = true }

(class<<self;self;end).module_eval {
	define_method(:usage) {
		puts op.to_s
		puts $! unless $!.to_s.empty?
		exit 1
	}
}

begin
	op.parse!(ARGV)

	usage if ARGV.empty?

	finputs = ARGV

	raise "multiple stdin" if (finputs + [fctx]).count("-") >= 2

rescue
	usage
end

def fread(path)
	path == "-" ? $stdin.read : File.read(path)
end

def fname(path)
	path == "-" ? "(stdin)" : path
end

libs.each {|lib| require lib }

inputs = finputs.map {|f| [fread(f), fname(f)] }

result = ""
if script
	inputs.each {|src, name|
		result.concat Mplex.script(src)
	}

else
	if fctx
		b = nil; Object.instance_eval { b = binding }
		ctx = eval("lambda{#{fread(fctx)}}.call", b, fname(fctx))
	end
	ctx ||= Object.new

	inputs.each {|src, name|
		Mplex.result(src, ctx, name, result)
	}
end

if foutput == "-"
	$stdout.write(result)
else
	File.open(foutput, "w") {|f|
		f.write result
	}
end

